#!/bin/bash
#
# Lookup public IP and/or hostname


error(){
    echo "ERROR: $*" >&2
}

hostlookup(){
    if hash getent &>/dev/null; then
        HOSTNAME=$(getent hosts "$IP" 2>/dev/null | awk '{ print $NF; exit }')
    fi

    if [[ -z $HOSTNAME ]] && hash dig &>/dev/null; then
        HOSTNAME=$(dig +short -x "$IP" 2>/dev/null | sed 's/\.$//')
    fi

    if [[ -z $HOSTNAME ]] && hash host &>/dev/null; then
        HOSTNAME=$(host "$IP" 2>/dev/null | awk '/ domain name pointer / { sub("\\.$", ""); print $NF; exit }')
    fi

    if [[ -z $HOSTNAME ]] && hash nslookup &>/dev/null; then
        HOSTNAME=$(nslookup "$IP" 2>/dev/null | awk '/^Address 1: / { if ($3 != "0.0.0.0") { print $4; exit } }; /name =/ { sub("\\.$", "", $NF); print $NF; exit }')
    fi

    if [[ -z $HOSTNAME ]]; then
        HOSTNAME=$(request 'http://ifconfig.me/host')
    fi

    if [[ -z $HOSTNAME && $OPTION_HOSTNAME -eq 1 ]]; then
        error 'Unable to obtain public hostname'
        exit 1
    fi
}

iplookup(){
    local provider='' providers=()

    providers=('http://v4.ident.me'
               'http://ipecho.net/plain')

    for provider in "${providers[@]}"; do
        IP=$(request "$provider")
        [[ -n $IP && $IP =~ ^[0-9.]+$ ]] && return 0
    done

    error 'Unable to obtain public IP address'
    exit 1
}

query(){
    if hash netcheck &>/dev/null && ! netcheck -i; then
        error 'No Internet access'
        exit 1
    elif ! hash wget &>/dev/null; then
        error "Unable to continue without 'wget'"
        exit 1
    fi

    iplookup

    if ! (( OPTION_IP == 1 && OPTION_HOSTNAME != 1 )); then
        hostlookup
    fi
}

request(){
    wget --timeout=1 --tries=3 -qO- "$1" 2>/dev/null
}


PROGRAM=${0##*/}

if [[ $# -eq 1 && $1 =~ ^(-h|--help)$ ]]; then
    cat <<-EOF
	Usage: $PROGRAM [OPTIONS]
	Lookup public IP address and/or hostname.

	Options:
	  -i                     public IP address
	  -n                     public hostname

	  -l                     append timestamp
	EOF
    exit 0
fi

params=$(getopt -o 'i,l,n' -n "$PROGRAM" -- "$@") || exit 1

eval set -- "$params"

HOSTNAME='' IP='' OPTION_HOSTNAME=0 OPTION_IP=0 OPTION_TIMESTAMP=0

for arg in "$@"; do
    case $arg in
        -i)
            OPTION_IP=1
            ;;
        -l)
            OPTION_TIMESTAMP=1
            ;;
        -n)
            OPTION_HOSTNAME=1
            ;;
        --)
            :
            ;;
        *)
            error 'Additional arguments are not accepted'
            exit 1
            ;;
    esac
done

query

if (( OPTION_HOSTNAME == 1 && OPTION_IP == 1 )) || \
   (( OPTION_HOSTNAME != 1 && OPTION_IP != 1 )); then
    if [[ -n $HOSTNAME ]]; then
        output="$IP ($HOSTNAME)"
    else
        output="$IP"
    fi
elif (( OPTION_HOSTNAME == 1 )); then
    output="$HOSTNAME"
elif (( OPTION_IP == 1 )); then
    output="$IP"
fi

if (( OPTION_TIMESTAMP == 1 )); then
    # printf '[%s] %s\n' "$(date '+%-m-%-d-%Y %R')" "$output"
    printf '[%s] %s\n' "$(date '+%m-%d-%Y %R')" "$output"
else
    echo "$output"
fi
